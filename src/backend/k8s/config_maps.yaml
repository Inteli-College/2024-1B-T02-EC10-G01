apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-config
  namespace: asky
data:
  initdb.sql: |
    CREATE SCHEMA IF NOT EXISTS pyxis;
    CREATE SCHEMA IF NOT EXISTS requests;
    CREATE SCHEMA IF NOT EXISTS auth;

    -- Set the default schema for the session
    SET search_path TO pyxis;

    -- Create tables within the 'pyxis' schema
    CREATE TABLE IF NOT EXISTS pyxis.dispenser (
        id SERIAL PRIMARY KEY,
        code VARCHAR(5) UNIQUE NOT NULL,
        floor INTEGER NOT NULL
    );

    CREATE TABLE IF NOT EXISTS pyxis.medicine (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) UNIQUE NOT NULL,
        dosage VARCHAR(255) NOT NULL
    );

    CREATE TABLE IF NOT EXISTS pyxis.material (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) UNIQUE NOT NULL
    );

    CREATE TABLE IF NOT EXISTS pyxis.assistance (
        id SERIAL PRIMARY KEY,
        description VARCHAR(255) UNIQUE NOT NULL
    );

    CREATE TABLE IF NOT EXISTS pyxis.dispenser_medicine (
        dispenser_id INTEGER NOT NULL,
        medicine_id INTEGER NOT NULL,
        PRIMARY KEY (dispenser_id, medicine_id),
        FOREIGN KEY (dispenser_id) REFERENCES pyxis.dispenser(id),
        FOREIGN KEY (medicine_id) REFERENCES pyxis.medicine(id)
    );

    CREATE TABLE IF NOT EXISTS pyxis.dispenser_material (
        dispenser_id INTEGER NOT NULL,
        material_id INTEGER NOT NULL,
        PRIMARY KEY (dispenser_id, material_id),
        FOREIGN KEY (dispenser_id) REFERENCES pyxis.dispenser(id),
        FOREIGN KEY (material_id) REFERENCES pyxis.material(id)
    );

    CREATE TABLE IF NOT EXISTS pyxis.dispenser_assistance (
        dispenser_id INTEGER NOT NULL,
        assistance_id INTEGER NOT NULL,
        PRIMARY KEY (dispenser_id, assistance_id),
        FOREIGN KEY (dispenser_id) REFERENCES pyxis.dispenser(id),
        FOREIGN KEY (assistance_id) REFERENCES pyxis.assistance(id)
    );

    -- Populate 'dispenser' table
    INSERT INTO pyxis.dispenser (code, floor) VALUES
    ('A1B2C', 5),
    ('D3E4F', 11),
    ('G5H6I', 19),
    ('J7K8L', 1),
    ('M9N0O', 8);

    -- Populate 'medicine' table
    INSERT INTO pyxis.medicine (name, dosage) VALUES
    ('Paracetamol', '500 mg'),
    ('Ibuprofeno', '200 mg'),
    ('Amoxicilina', '500 mg'),
    ('Dipirona', '500 mg'),
    ('Captopril', '25 mg'),
    ('Losartana', '50 mg'),
    ('Metformina', '500 mg'),
    ('Atorvastatina', '20 mg'),
    ('Sertralina', '50 mg'),
    ('Omeprazol', '20 mg');

    -- Populate 'material' table
    INSERT INTO pyxis.material (name) VALUES
    ('Luvas de procedimento'),
    ('Seringas de 5ml'),
    ('Máscaras cirúrgicas'),
    ('Cateter IV'),
    ('Ataduras');

    -- Populate 'assistance' table
    INSERT INTO pyxis.assistance (description) VALUES
    ('Manutenção'),
    ('Dúvidas'),
    ('Divergência');

    -- Associating medicines with dispensers
    INSERT INTO pyxis.dispenser_medicine (dispenser_id, medicine_id) VALUES
    (1, 1),
    (1, 2),
    (1, 4),
    (1, 5),
    (1, 6),
    (2, 10),
    (2, 5),
    (2, 4),
    (2, 3),
    (3, 4),
    (4, 5),
    (5, 1);

    -- Associating materials with dispensers
    INSERT INTO pyxis.dispenser_material (dispenser_id, material_id) VALUES
    (1, 1),
    (1, 2),
    (2, 2),
    (2, 3),
    (3, 4),
    (4, 5),
    (5, 1);

    -- Associating assistance requests with dispensers
    INSERT INTO pyxis.dispenser_assistance (dispenser_id, assistance_id) VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (2, 1),
    (2, 2),
    (2, 3),
    (3, 1),
    (3, 2),
    (3, 3);

    -- Set the default schema to 'auth' and create 'users' table
    SET search_path TO auth;

    CREATE TABLE IF NOT EXISTS auth.users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(100) NOT NULL,
        created_at TIMESTAMP,
        updated_at TIMESTAMP,
        mobile_token VARCHAR(255)
    );

    -- Populate 'users' table with bcrypt hashed passwords
    INSERT INTO auth.users (name, email, password_hash, role) VALUES 
    ('Larissa Morais', 'admin@admin.com', '$2b$12$1kdVBvyvbLdvRUB3mmoCw.Eb9EYTlSbNskq9EueQR7Z.kt8.mvEam', 'admin'),
    ('Neide Santos', 'nurse@nurse.com', '$2b$12$RnEDdfRZppccKkjbzmL0QOqzUmNzg73sWwbd6PnQJEfj2Cxl.6sIq', 'nurse'),
    ('Pedro Ferreira', 'agent@agent.com', '$2b$12$odk8pcSN25kBrtN7uI/UOO146EeDACNp4qyXu5AXTsWPHHqjRIohS', 'agent');

    -- Ensure the 'id' sequence for the 'users' table is set correctly
    SELECT setval(pg_get_serial_sequence('auth.users', 'id'), (SELECT MAX(id) FROM auth.users));
